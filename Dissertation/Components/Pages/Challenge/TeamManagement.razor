@page "/challenge/team"
@using Dissertation.Models.Challenge.Enums
@using Dissertation.View_Models
@rendermode InteractiveServer
@inject ChallengeDashboardViewModel ViewModel

<link href="Styles/Main.css" rel="stylesheet"/>
<link href="Styles/Home.css" rel="stylesheet"/>
<link rel="stylesheet" href="Styles/Challenge/Shared.css"/>
<link rel="stylesheet" href="Styles/Challenge/TeamManagement.css"/>

<MudPaper Elevation="4" Square="true" Class="team-management-paper">

	<div class="team-management-form">
		<h4>Team</h4>

		<MudInput T="string" Label="Developer Name" @bind-Value="ViewModel.DeveloperViewModel.DeveloperName"/>

		<MudSelect T="DeveloperExperienceLevel" Label="Experience Level" @bind-Value="ViewModel.DeveloperViewModel.SelectedDeveloperExperienceLevel">
			@foreach (var role in Enum.GetValues(typeof(DeveloperExperienceLevel)).Cast<DeveloperExperienceLevel>())
			{
				<MudSelectItem T="DeveloperExperienceLevel" Value="@role">@role.ToString()</MudSelectItem>
			}
		</MudSelect>

		<MudButton OnClick="@ViewModel.DeveloperViewModel.AddDeveloper" Disabled="!ViewModel.DeveloperViewModel.CanAddDeveloper()" Class="mud-button">
			Add Developer
		</MudButton>
	</div>

	<div class="current-team-list">
		<h4>Current Team</h4>
		<MudList T="string">
			@foreach (var dev in ViewModel.ProjectStateService.Team)
			{
				<MudListItem T="string">
					<MudText Typo="Typo.h6" Class="mb-1">
						<strong>@dev.Name</strong>
					</MudText>
					<MudText Typo="Typo.body2" Class="text-muted">
						@dev.ExperienceLevel | £@dev.Cost
					</MudText>
					<MudButton OnClick="() => ViewModel.DeveloperViewModel.RemoveDeveloper(dev)" Color="Color.Error" Variant="Variant.Filled" Size="Size.Small">
						Delete
					</MudButton>
				</MudListItem>
			}
		</MudList>
	</div>

	<div>
		<MudButton Href="/challenge/dashboard" Class="action-button">⬅ Back to Dashboard</MudButton>
	</div>

</MudPaper>