@page "/challenge/team"
@using Dissertation.Models.Challenge.Enums
@using Dissertation.View_Models
@rendermode InteractiveServer
@inject ChallengeDashboardViewModel ViewModel


<link href="Styles/Main.css" rel="stylesheet"/>
<link href="Styles/Home.css" rel="stylesheet"/>
<link rel="stylesheet" href="Styles/Challenge/Shared.css"/>

<h3>Manage Team</h3>

<div>
	<h4>Team</h4>

	<MudInput T="string" Label="Developer Name" @bind-Value="ViewModel.DeveloperViewModel.DeveloperName"/>

	<MudSelect T="DeveloperExperienceLevel" Label="Experience Level" @bind-Value="ViewModel.DeveloperViewModel.SelectedDeveloperExperienceLevel">
		@foreach (var role in Enum.GetValues(typeof(DeveloperExperienceLevel)).Cast<DeveloperExperienceLevel>())
		{
			<MudSelectItem T="DeveloperExperienceLevel" Value="@role">@role.ToString()</MudSelectItem>
		}
	</MudSelect>

	<MudButton OnClick="@ViewModel.DeveloperViewModel.AddDeveloper" Disabled="ViewModel.DeveloperViewModel.CanAddDeveloper()">
		Add Developer
	</MudButton>
</div>

<div>
	<h4>Current Team</h4>
	<ul>
		@foreach (var dev in ViewModel.ProjectStateService.Team)
		{
			<li>
				<div>
					<MudText Typo="Typo.h6" Class="mb-1">
						<strong>@dev.Name</strong>
					</MudText>
					<MudText Typo="Typo.body2" Class="text-muted">
						@dev.ExperienceLevel | £@dev.Cost
					</MudText>
					<MudButton OnClick="() => ViewModel.DeveloperViewModel.RemoveDeveloper(dev)" Color="Color.Error" Variant="Variant.Filled" Size="Size.Small">
						Delete
					</MudButton>
				</div>
			</li>
		}
	</ul>
</div>

<div>
	<MudNavLink Href="/challenge/dashboard" Class="nav-link" ActiveClass="active">⬅ Back to Dashboard</MudNavLink>
</div>