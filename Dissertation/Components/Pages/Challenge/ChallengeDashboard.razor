@page "/challenge/dashboard"
@using Dissertation.View_Models
@rendermode InteractiveServer
@inject NavigationManager NavigationManager
@inject ChallengeDashboardViewModel ViewModel
@inject ISnackbar Snackbar
<link rel="stylesheet" href="Styles/Challenge/ChallengeDashboard.css"/>

<h2>Project Dashboard</h2>

<h3>@ViewModel.ProjectStateService.CurrentProject.Project.Title</h3>
<h4>@ViewModel.ProjectStateService.CurrentProject.Project.Description</h4>
<p><strong>Budget:</strong> £@ViewModel.ProjectStateService.CurrentProject.Budget</p>

<div>
	<MudButton href="/challenge/team" class="action-button">Manage Development Team</MudButton>
	<MudButton href="/challenge/stories" class="action-button">Manage User Stories</MudButton>
	<MudButton href="/challenge/sprints" class="action-button">Manage Sprints</MudButton>
	<MudButton href="/challenge/summary" class="action-button" Disabled="!ViewModel.SprintViewModel.CanShowSummary()">View Project Summary</MudButton>
</div>

<br/>


<MudButton OnClick="@StartSprint" Disabled="!ViewModel.SprintViewModel.CanStartSprint()">Start Sprint</MudButton>

@code {

	private async Task StartSprint()
	{
		var totalSalary = ViewModel.ProjectStateService.Team.Sum(dev => dev.Cost);

		if (ViewModel.ProjectStateService.CurrentProject.Budget < totalSalary)
		{
			Snackbar.Add("Insufficient budget to start the sprint!", Severity.Error);
			return;
		}

		await ViewModel.SprintViewModel.StartSprint();

		Snackbar.Add("Sprint started successfully!", Severity.Success);

		var allStoriesCompleted = ViewModel.ProjectStateService.UserStoryInstances.All(usi => usi.IsComplete);
		var completedSprintsCount = ViewModel.ProjectStateService.Sprints.Count(s => s.IsCompleted);
		var totalSprints = ViewModel.ProjectStateService.CurrentProject.Project.NumOfSprints;

		if (allStoriesCompleted || completedSprintsCount >= totalSprints)
		{
			NavigationManager.NavigateTo("/challenge/summary");
		}
		else
		{
			NavigationManager.NavigateTo("/challenge/sprints");
		}
	}

}