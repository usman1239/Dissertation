@page "/challenge/dashboard"
@using Dissertation.Components.Dialogs
@using Dissertation.View_Models
@rendermode InteractiveServer
@inject ChallengeDashboardViewModel ViewModel
@using Microsoft.AspNetCore.Authorization
@inherits LayoutComponentBase
@attribute [Authorize]
@inject IDialogService DialogService
@inject IJSRuntime Js

<link href="Styles/Home.css" rel="stylesheet"/>
<link rel="stylesheet" href="Styles/Challenge/SelectProject.css"/>
<link rel="stylesheet" href="Styles/Challenge/Tour.css"/>

<div>

	<MudPaper Class="select-project-paper">

		<MudText Class="dashboard-title orbitron-text ">Project Dashboard</MudText>

		<MudText Class="dashboard-subtitle orbitron-text">
			Project Difficulty:
			@(ViewModel.ProjectStateService.CurrentProjectInstance.Project.NumOfSprints <= 5 ? "Easy" :
			ViewModel.ProjectStateService.CurrentProjectInstance.Project.NumOfSprints <= 10 ? "Medium" : "Hard")
		</MudText>

		<MudText Class="dashboard-subtitle orbitron-text">
			@ViewModel.ProjectStateService.CurrentProjectInstance.Project.Title
		</MudText>

		<MudText Class="dashboard-description orbitron-text">
			@ViewModel.ProjectStateService.CurrentProjectInstance.Project.Description
		</MudText>

		<MudText Class="dashboard-description orbitron-text">
			<strong>Budget:</strong> £@(ViewModel.ProjectStateService.CurrentProjectInstance.Budget)
		</MudText>

		<MudDivider Class="mud-divider"/>

		<MudGrid>
			<MudItem xs="12" sm="6" md="3">
				<div id="manage-dev-team">
					<MudButton Href="/challenge/team" Variant="Variant.Filled" Color="Color.Primary" FullWidth Class="mud-button color-primary orbitron-text">
						Manage Development Team
					</MudButton>
				</div>
			</MudItem>
			<MudItem xs="12" sm="6" md="3">
				<div id="manage-user-stories">
					<MudButton Href="/challenge/stories" Variant="Variant.Filled" Color="Color.Primary" FullWidth Class="mud-button color-primary orbitron-text">
						Manage User Stories
					</MudButton>
				</div>
			</MudItem>
			<MudItem xs="12" sm="6" md="3">
				<div id="manage-sprints">
					<MudButton Href="/challenge/sprints" Variant="Variant.Filled" Color="Color.Primary" FullWidth Class="mud-button color-primary orbitron-text">
						Manage Sprints
					</MudButton>
				</div>
			</MudItem>
			<MudItem xs="12" sm="6" md="3">
				<div id="view-project-summary">
					<MudButton Href="/challenge/summary" Variant="Variant.Filled" Color="Color.Primary" FullWidth Disabled="!ViewModel.SprintViewModel.CanShowSummary()" Class="mud-button color-primary orbitron-text">
						View Project Summary
					</MudButton>
				</div>
			</MudItem>
		</MudGrid>

		<MudDivider Class="mud-divider"/>

		<br/>
		<MudButton OnClick="@ViewModel.SprintViewModel.StartSprint"
		           Variant="Variant.Filled"
		           Color="Color.Secondary"
		           FullWidth
		           Disabled="!ViewModel.SprintViewModel.CanStartSprint()"
		           Class="mud-button color-secondary orbitron-text">
			Start Sprint
		</MudButton>

		<div id="challenge_section_tour">
			<br/>
			<MudButton OnClick="ConfirmAsync"
			           Variant="Variant.Filled"
			           Color="Color.Secondary"
			           FullWidth
			           Disabled="_isChallengeActive"
			           Class="mud-button color-secondary orbitron-text">
				Daily Challenge!
			</MudButton>
		</div>

		<br/>
		<MudButton OnClick="StartTour" Color="Color.Primary" Variant="Variant.Filled"
		           Class="mud-button color-secondary orbitron-text"
		           FullWidth>

			Start Tour
		</MudButton>


	</MudPaper>
</div>

@if (!string.IsNullOrEmpty(ViewModel.ProjectViewModel.CurrentChallengeDescription))
{
	<MudAlert Class="challenge-alert">
		🏆 Today's Challenge: @ViewModel.ProjectViewModel.CurrentChallengeDescription
	</MudAlert>
}

<div>
	<AIChatbot/>
</div>

@code {

	private bool _isChallengeActive;

	protected override async Task OnInitializedAsync()
	{
		_isChallengeActive = await ViewModel.ProjectViewModel.IsChallengeActive();
	}

	private async Task StartTour()
	{
		await Js.InvokeVoidAsync("startTour");
	}

	private async Task ConfirmAsync()
	{
		var parameters = new DialogParameters<DailyChallengeDialog>
		{
			{ x => x.ContentText, "Are you sure you want to take on the Daily Challenge? This action cannot be undone" },
			{ x => x.ButtonText, "Yes" },
			{ x => x.Color, Color.Success }
		};

		var options = new DialogOptions { CloseOnEscapeKey = true };

		var dialog = await DialogService.ShowAsync<DailyChallengeDialog>("Confirm", parameters, options);
		var result = await dialog.Result;

		if (result is { Canceled: false })
		{
			await ViewModel.ProjectViewModel.GetDailyChallenge();
		}
	}

}