@page "/challenge/summary"
@rendermode InteractiveServer
@using Dissertation.View_Models
@inject ChallengeDashboardViewModel ViewModel

<h2>Project Summary</h2>

<h3>@ViewModel.ProjectStateService.CurrentProject.Project.Title</h3>
<p><strong>Total Budget Remaining:</strong> £@ViewModel.ProjectStateService.CurrentProject.Budget</p>

<h4>📊 Project Performance</h4>
<ul>
	<li>
		<strong>Total Sprints:</strong> @ViewModel.ProjectStateService.CurrentProject.Project.NumOfSprints
	</li>
	<li>
		<strong>Completed Sprints:</strong> @ViewModel.ProjectStateService.Sprints.Count(s => s.IsCompleted)
	</li>
	<li>
		<strong>Total User Stories:</strong> @ViewModel.ProjectStateService.UserStoryInstances.Count
	</li>
	<li>
		<strong>Completed User Stories:</strong> @ViewModel.ProjectStateService.UserStoryInstances.Count(usi => usi.IsComplete)
	</li>
</ul>

<h4>📈 Sprint Performance Overview</h4>

<MudCard>
	<MudCardContent>
		<MudChart ChartType="ChartType.Line"
		          ChartSeries="@ViewModel.SprintViewModel.Series"
		          XAxisLabels="@ViewModel.SprintViewModel.SprintLabels"
		          Width="100%"
		          Height="350px"
		          ChartOptions="@ViewModel.SprintViewModel.ChartOptions"/>
	</MudCardContent>
</MudCard>

<br/>

<h4>💰 Budget Analysis</h4>
<ul>
	<li><strong>Initial Budget:</strong> £@(ViewModel.ProjectStateService.CurrentProject.Project.Budget)</li>
	<li><strong>Total Spent:</strong> £@(ViewModel.ProjectStateService.CurrentProject.Project.Budget - ViewModel.ProjectStateService.CurrentProject.Budget)</li>
	<li><strong>Final Budget:</strong> £@ViewModel.ProjectStateService.CurrentProject.Budget</li>
</ul>

<h4>📈 Sprint Performance Insights</h4>
@{
	var bestSprint = ViewModel.ProjectStateService.Sprints.OrderByDescending(s => s.Progress).FirstOrDefault();
	var worstSprint = ViewModel.ProjectStateService.Sprints.OrderBy(s => s.Progress).FirstOrDefault();
	var avgProgress = ViewModel.ProjectStateService.Sprints.Any()
		? ViewModel.ProjectStateService.Sprints.Average(s => s.Progress)
		: 0;
}

<ul>
	<li>
		<strong>Best Sprint:</strong> @(bestSprint != null ? $"Sprint {bestSprint.SprintNumber} with {bestSprint.Progress} points" : "N/A")
	</li>
	<li>
		<strong>Worst Sprint:</strong> @(worstSprint != null ? $"Sprint {worstSprint.SprintNumber} with {worstSprint.Progress} points" : "N/A")
	</li>
	<li><strong>Average Progress Per Sprint:</strong> @avgProgress.ToString("0.00") points</li>
</ul>

<h4>🛠️ Developer Utilization</h4>
@{
	var underutilizedDevs = ViewModel.ProjectStateService.Team
		.Where(dev => ViewModel.ProjectStateService.UserStoryInstances.All(usi => usi.DeveloperAssignedId != dev.Id))
		.ToList();

	var overworkedDevs = ViewModel.ProjectStateService.Team
		.Where(dev => ViewModel.ProjectStateService.UserStoryInstances.Count(usi => usi.DeveloperAssignedId == dev.Id) > 5)
		.ToList();
}

<ul>
	@if (underutilizedDevs.Any())
	{
		<li>
			<strong>Underutilized Developers:</strong> @string.Join(", ", underutilizedDevs.Select(d => d.Name))
		</li>
	}
	else
	{
		<li>
			✅ All developers were actively used.
		</li>
	}

	@if (overworkedDevs.Any())
	{
		<li>
			<strong>Overworked Developers:</strong> @string.Join(", ", overworkedDevs.Select(d => d.Name))
		</li>
	}
</ul>

<h4>🔍 Decision-Making Insights</h4>
@{
	var highValueStories = ViewModel.ProjectStateService.UserStoryInstances
		.Count(usi => usi.UserStory.StoryPoints >= 6 && usi.IsComplete);

	var totalHighValueStories = ViewModel.ProjectStateService.UserStoryInstances.Count(usi => usi.UserStory.StoryPoints >= 6);
}

<ul>
	<li><strong>High-Value User Stories Completed (6 or more story points) :</strong> @highValueStories / @totalHighValueStories</li>
	<li>
		<strong>Task Allocation:</strong>
		@(ViewModel.ProjectStateService.UserStoryInstances.Any(usi => usi.DeveloperAssignedId == null)
			? "Some stories were left unassigned, affecting progress."
			: "All stories were properly assigned.")
	</li>
</ul>

<h4>🏆 Final Verdict</h4>
@if (ViewModel.ProjectStateService.CurrentProject.Budget > 0 &&
     ViewModel.ProjectStateService.UserStoryInstances.All(usi => usi.IsComplete))
{
	<p style="color: green;">
		<strong>🎉 Congratulations! You successfully managed the project with a remaining budget of £@ViewModel.ProjectStateService.CurrentProject.Budget.</strong>
	</p>
	<p>Your management was efficient, and you completed all user stories on time.</p>
}
else if (ViewModel.ProjectStateService.UserStoryInstances.Any(usi => !usi.IsComplete))
{
	<p style="color: orange;">
		<strong>⚠️ The project was completed, but some user stories were left unfinished.</strong>
	</p>
	<p>Consider improving task assignment and developer utilization.</p>
}
else
{
	<p style="color: red;">
		<strong>❌ The project was not completed successfully.</strong>
	</p>
	<p>Consider adjusting budget spending, improving sprint planning, and assigning tasks more efficiently.</p>
}

<div>
	<MudNavLink Href="/challenge/select-project" Class="nav-link" ActiveClass="active">⬅ Back to Dashboard</MudNavLink>
</div>

@code
{
	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			await ViewModel.SprintViewModel.LoadSprintProgressAsync();
			StateHasChanged();
		}
	}
}