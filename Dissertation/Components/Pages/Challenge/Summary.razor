@page "/challenge/summary"
@rendermode InteractiveServer
@using Dissertation.View_Models
@inject ChallengeDashboardViewModel ViewModel

<link href="Styles/Main.css" rel="stylesheet"/>
<link href="Styles/Home.css" rel="stylesheet"/>
<link rel="stylesheet" href="Styles/Challenge/Shared.css"/>
<link rel="stylesheet" href="Styles/Challenge/Summary.css"/>


<MudPaper>
	<MudText Typo="Typo.h4" Align="Align.Center">Project Summary</MudText>

	<MudText Typo="Typo.h6" Align="Align.Center">@ViewModel.ProjectStateService.CurrentProjectInstance.Project.Title</MudText>
	<MudText Typo="Typo.body1" Align="Align.Center"><strong>Total Budget Remaining:</strong> £@ViewModel.ProjectStateService.CurrentProjectInstance.Budget</MudText>

	<MudDivider/>

	<MudText Typo="Typo.h6">📊 Project Performance</MudText>
	<MudList T="string">
		<MudListItem>
			<MudText Typo="Typo.body2">
				<strong>Total Sprints:</strong> @ViewModel.ProjectStateService.CurrentProjectInstance.Project.NumOfSprints
			</MudText>
		</MudListItem>
		<MudListItem>
			<MudText Typo="Typo.body2">
				<strong>Completed Sprints:</strong> @ViewModel.ProjectStateService.Sprints.Count(s => s.IsCompleted)
			</MudText>
		</MudListItem>
		<MudListItem>
			<MudText Typo="Typo.body2">
				<strong>Total User Stories:</strong> @ViewModel.ProjectStateService.UserStoryInstances.Count
			</MudText>
		</MudListItem>
		<MudListItem>
			<MudText Typo="Typo.body2">
				<strong>Completed User Stories:</strong> @ViewModel.ProjectStateService.UserStoryInstances.Count(usi => usi.IsComplete)
			</MudText>
		</MudListItem>
	</MudList>

	<MudDivider/>

	<MudText Typo="Typo.h6">📈 Sprint Performance Overview</MudText>
	<MudCard>
		<MudCardContent>
			<MudChart ChartType="ChartType.Line"
			          ChartSeries="@ViewModel.SprintViewModel.Series"
			          XAxisLabels="@ViewModel.SprintViewModel.SprintLabels"
			          Width="100%"
			          Height="350px"/>
		</MudCardContent>
	</MudCard>

	<MudDivider/>

	<MudText Typo="Typo.h6">💰 Budget Analysis</MudText>
	<MudList T="string">
		<MudListItem>
			<MudText Typo="Typo.body2"><strong>Initial Budget:</strong> £@(ViewModel.ProjectStateService.CurrentProjectInstance.Project.Budget)</MudText>
		</MudListItem>
		<MudListItem>
			<MudText Typo="Typo.body2"><strong>Net Spend:</strong> £@(ViewModel.ProjectStateService.CurrentProjectInstance.Project.Budget - ViewModel.ProjectStateService.CurrentProjectInstance.Budget)</MudText>
		</MudListItem>
		<MudListItem>
			<MudText Typo="Typo.body2"><strong>Final Budget:</strong> £@ViewModel.ProjectStateService.CurrentProjectInstance.Budget</MudText>
		</MudListItem>
	</MudList>

	<MudDivider/>

	<MudText Typo="Typo.h6">📈 Sprint Performance Insights</MudText>
	@{
		var bestSprint = ViewModel.ProjectStateService.Sprints.OrderByDescending(s => s.Progress).FirstOrDefault();
		var worstSprint = ViewModel.ProjectStateService.Sprints.OrderBy(s => s.Progress).FirstOrDefault();
		var avgProgress = ViewModel.ProjectStateService.Sprints.Any()
			? ViewModel.ProjectStateService.Sprints.Average(s => s.Progress)
			: 0;
	}

	<MudList T="string">
		<MudListItem>
			<MudText Typo="Typo.body2">
				<strong>Best Sprint:</strong> @(bestSprint != null ? $"Sprint {bestSprint.SprintNumber} with {bestSprint.Progress} points" : "N/A")
			</MudText>
		</MudListItem>
		<MudListItem>
			<MudText Typo="Typo.body2">
				<strong>Worst Sprint:</strong> @(worstSprint != null ? $"Sprint {worstSprint.SprintNumber} with {worstSprint.Progress} points" : "N/A")
			</MudText>
		</MudListItem>
		<MudListItem>
			<MudText Typo="Typo.body2"><strong>Average Progress Per Sprint:</strong> @avgProgress.ToString("0.00") points</MudText>
		</MudListItem>
	</MudList>

	<MudDivider/>

	<MudText Typo="Typo.h6">🛠️ Developer Utilization</MudText>
	@{
		var underutilizedDevs = ViewModel.ProjectStateService.Team
			.Where(dev => ViewModel.ProjectStateService.UserStoryInstances.All(usi => usi.DeveloperAssignedId != dev.Id))
			.ToList();

		var overworkedDevs = ViewModel.ProjectStateService.Team
			.Where(dev => ViewModel.ProjectStateService.UserStoryInstances.Count(usi => usi.DeveloperAssignedId == dev.Id) > 5)
			.ToList();
	}

	<MudList T="string">
		@if (underutilizedDevs.Any())
		{
			<MudListItem>
				<MudText Typo="Typo.body2">
					<strong>Underutilized Developers:</strong> @string.Join(", ", underutilizedDevs.Select(d => d.Name))
				</MudText>
			</MudListItem>
		}
		else
		{
			<MudListItem>
				<MudText Typo="Typo.body2">✅ All developers were actively used.</MudText>
			</MudListItem>
		}

		@if (overworkedDevs.Any())
		{
			<MudListItem>
				<MudText Typo="Typo.body2">
					<strong>Overworked Developers:</strong> @string.Join(", ", overworkedDevs.Select(d => d.Name))
				</MudText>
			</MudListItem>
		}
	</MudList>

	<MudDivider/>

	<MudText Typo="Typo.h6">🔍 Decision-Making Insights</MudText>
	@{
		var highValueStories = ViewModel.ProjectStateService.UserStoryInstances
			.Count(usi => usi.UserStory.StoryPoints >= 6 && usi.IsComplete);

		var totalHighValueStories = ViewModel.ProjectStateService.UserStoryInstances.Count(usi => usi.UserStory.StoryPoints >= 6);
	}

	<MudList T="string">
		<MudListItem>
			<MudText Typo="Typo.body2"><strong>High-Value User Stories Completed (6 or more story points):</strong> @highValueStories / @totalHighValueStories</MudText>
		</MudListItem>
		<MudListItem>
			<MudText Typo="Typo.body2">
				<strong>Task Allocation:</strong>
				@(ViewModel.ProjectStateService.UserStoryInstances.Any(usi => usi.DeveloperAssignedId == null)
					? "Some stories were left unassigned, affecting progress."
					: "All stories were properly assigned.")
			</MudText>
		</MudListItem>
	</MudList>

	<MudDivider/>

	<MudText Typo="Typo.h6">🏆 Final Verdict</MudText>
	@if (ViewModel.ProjectStateService.CurrentProjectInstance.Budget > 0 &&
	     ViewModel.ProjectStateService.UserStoryInstances.All(usi => usi.IsComplete))
	{
		<MudText Typo="Typo.body1" Color="Color.Success">
			<strong>🎉 Congratulations! You successfully managed the project with a remaining budget of £@ViewModel.ProjectStateService.CurrentProjectInstance.Budget.</strong>
		</MudText>
		<MudText Typo="Typo.body2">Your management was efficient, and you completed all user stories on time.</MudText>
	}
	else if (ViewModel.ProjectStateService.CurrentProjectInstance.Budget <= 0)
	{
		<MudText Typo="Typo.body1" Color="Color.Error">
			<strong>❌ The project was not completed successfully.</strong>
		</MudText>
		<MudText Typo="Typo.body2">Your budget ran out before finishing the project. Consider adjusting spending and sprint planning.</MudText>
	}
	else if (ViewModel.ProjectStateService.UserStoryInstances.Any(usi => !usi.IsComplete))
	{
		<MudText Typo="Typo.body1" Color="Color.Warning">
			<strong>⚠️ The project was completed, but some user stories were left unfinished.</strong>
		</MudText>
		<MudText Typo="Typo.body2">Consider improving task assignment and developer utilization.</MudText>
	}

	<MudDivider/>

	<MudNavLink Href="/challenge/select-project">⬅ Back to Dashboard</MudNavLink>
</MudPaper>

@code
{
	protected override void OnInitialized()
	{
		ViewModel.SprintViewModel.LoadSprintProgressAsync();
		StateHasChanged();
	}
}