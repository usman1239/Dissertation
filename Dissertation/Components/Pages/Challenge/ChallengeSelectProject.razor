@page "/challenge/select-project"
@rendermode InteractiveServer
@inject ChallengeDashboardViewModel ViewModel
@using Dissertation.View_Models
@using Microsoft.AspNetCore.Authorization
@inherits LayoutComponentBase
@attribute [Authorize]

<link href="Styles/Home.css" rel="stylesheet"/>
<link rel="stylesheet" href="Styles/Challenge/SelectProject.css"/>

<MudPaper Class="select-project-paper">
	<MudText Class="select-project-title orbitron-text">Select a Project</MudText>

	@if (ViewModel.ProjectViewModel.SavedProjects.Any())
	{
		<MudText Class="select-project-subtitle orbitron-text">Continue Saved Projects</MudText>

		<ul class="project-list">
			@foreach (var project in ViewModel.ProjectViewModel.SavedProjects)
			{
				<li class="project-item">
					<div class="project-header">
						<span class="project-title">@project.Project.Title</span>
						<span class="project-description">@project.Project.Description</span>
					</div>
					<div class="project-details">
						<span class="project-difficulty">
							<strong>Difficulty:</strong>
							@(project.Project.NumOfSprints <= 5 ? "Easy" :
							project.Project.NumOfSprints <= 10 ? "Medium" : "Hard")
						</span>
						<span class="project-budget"><strong>| Budget:</strong> £@project.Budget</span>
					</div>

					<div class="project-actions">
						<button class="project-action-btn continue-btn" @onclick="() => ViewModel.ProjectViewModel.SelectProject(project.ProjectId, true)">
							Continue
						</button>
						<button class="project-action-btn delete-btn" @onclick="() => ViewModel.ProjectViewModel.DeleteSavedProjectInstanceAsync(project.ProjectId)">
							Delete
						</button>
					</div>
				</li>
			}
		</ul>
	}

	<div class="divider"></div>

	<MudText Class="select-project-subtitle orbitron-text">Choose A New Project</MudText>

	<ul class="project-list">
		@foreach (var project in ViewModel.ProjectViewModel.AvailableProjects)
		{
			<li class="project-item">
				<div class="project-header">
					<span class="project-title">@project!.Title</span>
					<span class="project-description">@project.Description</span>
				</div>
				<div class="project-details">
					<span class="project-difficulty">
						<strong>Difficulty:</strong>
						@(project.NumOfSprints <= 5 ? "Easy" :
						project.NumOfSprints <= 10 ? "Medium" : "Hard")
					</span>
					<span class="project-budget"><strong>| Budget:</strong> £@(project.Budget)</span>
				</div>

				<button class="project-action-btn" @onclick="() => ViewModel.ProjectViewModel.SelectProject(project.Id, false)">
					Select
				</button>
			</li>
		}
	</ul>
</MudPaper>

@code {

	protected override async Task OnInitializedAsync()
	{
		await ViewModel.ProjectViewModel.GetUser();
		await ViewModel.ProjectViewModel.LoadProjectsWithSavedProgress();
		await ViewModel.ProjectViewModel.LoadAvailableProjectsAsync();
	}

}