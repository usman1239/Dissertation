@page "/challenge/select-project"
@rendermode InteractiveServer
@inject ChallengeDashboardViewModel ViewModel
@using Dissertation.View_Models
@using Microsoft.AspNetCore.Authorization
@inherits LayoutComponentBase
@attribute [Authorize]

<link href="Styles/Main.css" rel="stylesheet"/>
<link href="Styles/Home.css" rel="stylesheet"/>
<link rel="stylesheet" href="Styles/Challenge/Shared.css"/>
<link rel="stylesheet" href="Styles/Challenge/ChallengeDashboard.css"/>


<MudPaper>
	<MudText Typo="Typo.h4" Align="Align.Center">Select a Project</MudText>

	@if (ViewModel.ProjectViewModel.SavedProjects.Any())
	{
		<MudText Typo="Typo.h5" Align="Align.Center">Continue Saved Projects</MudText>

		<MudList T="string">
			@foreach (var project in ViewModel.ProjectViewModel.SavedProjects)
			{
				<MudListItem>
					<MudText Typo="Typo.h6">@project.Project.Title</MudText>
					<MudText Typo="Typo.body2">@project.Project.Description</MudText>
					<MudText Typo="Typo.body2">
						<strong>Difficulty:</strong>
						@(project.Project.NumOfSprints <= 5 ? "Easy" :
						project.Project.NumOfSprints <= 10 ? "Medium" : "Hard")
					</MudText>
					<MudText Typo="Typo.body2"><strong>Budget:</strong> £@project.Budget</MudText>

					<MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="() => ViewModel.ProjectViewModel.SelectProject(project.ProjectId, true)">
						Continue
					</MudButton>
					<MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="() => ViewModel.ProjectViewModel.DeleteSavedProjectInstanceAsync(project.ProjectId)">
						Delete
					</MudButton>
				</MudListItem>
			}
		</MudList>
	}

	<MudDivider/>

	<MudText Typo="Typo.h5" Align="Align.Center">Choose A New Project</MudText>

	<MudList T="string">
		@foreach (var project in ViewModel.ProjectViewModel.AvailableProjects)
		{
			<MudListItem>
				<MudText Typo="Typo.h6">@project!.Title</MudText>
				<MudText Typo="Typo.body2">@project!.Description</MudText>
				<MudText Typo="Typo.body2">
					<strong>Difficulty:</strong>
					@(project!.NumOfSprints <= 5 ? "Easy" :
					project.NumOfSprints <= 10 ? "Medium" : "Hard")
				</MudText>
				<MudText Typo="Typo.body2"><strong>Budget:</strong> £@project!.Budget</MudText>

				<MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="() => ViewModel.ProjectViewModel.SelectProject(project.Id, false)">
					Select
				</MudButton>
			</MudListItem>
		}
	</MudList>
</MudPaper>


@code {

	protected override async Task OnInitializedAsync()
	{
		await ViewModel.ProjectViewModel.GetUser();
		await ViewModel.ProjectViewModel.LoadProjectsWithSavedProgress();
		await ViewModel.ProjectViewModel.LoadAvailableProjectsAsync();
	}

}